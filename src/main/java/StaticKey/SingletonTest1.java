package StaticKey;

/**
 * 设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。
 * 它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。
 *
 * 单例设计模式
 * 1、类的单例模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法。
 *             如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为 private。这样就不能用new操作符
 *             在类的外部产生类的对象了。
 *
 * 2、如何实现：1.饿汉式  2. 懒汉式
 * 3、区分饿汉式和懒汉式：
 *    饿汉式：提前造好对象，对象加载时间过长。天然线程安全的。
 *    懒汉式：延迟创建对象。目前的写法可能造成线程不安全。--------到多线程内容时修改
 *
 *
 * 4、单例模式应用场景举例：java.lang.Runtime; 网站的计数器，应用程序的日志应用，数据库连接池，项目中读取配置文件的类。
 *                      Application也是单例的典型应用。
 *
 *
 * 有23种不同的设计模式供选择：
 *
 * 创建型模式（Creational Pattern）：对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。
 *（5种）工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式
 *记忆口诀：创工原单建抽（创公园，但见愁）
 *
 * 结构型模式（Structural Pattern）：关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，
 * 就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。
 *
 * （7种）适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式
 *
 * 记忆口诀：结享外组适代装桥（姐想外租，世代装桥）
 *
 * 行为型模式（Behavioral Pattern）：关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；
 * 不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。
 *
 * （11种）策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式
 *
 * 记忆口诀：行状责中模访解备观策命迭（形状折中模仿，戒备观测鸣笛）
 */

public class SingletonTest1 {
    public static void main(String[] args) {
        Bank bank1 = Bank.getInstance();
        Bank bank2 = Bank.getInstance();

        System.out.println(bank1 == bank2); //true; 类内部仅存在唯一对象实例。
    }

}

// 单例的饿汉式实现
class Bank{

    //1.私有化类的构造器
    private Bank(){

    }

    //2.内部创建类的对象，要求此对象也必须声明为静态的
    //一上来就造好，比较饿，就是饿汉式。
    private static Bank instance = new Bank();

    //3.提供公共的静态的方法，返回类的对象
     public static Bank getInstance(){
         return instance;
     }


}
